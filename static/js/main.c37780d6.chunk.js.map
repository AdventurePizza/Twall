{"version":3,"sources":["components/Tv.tsx","firebaseContext.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["index","Tv","address","thumbnail","useState","play","setPlay","current","setCurrent","tokens","setTokens","loaded","setLoaded","useEffect","fetchGraphQL","operationsDoc","operationName","variables","a","fetch","method","body","JSON","stringify","query","result","json","ress","addr","query_collection","errors","data","console","error","hic_et_nunc_token_holder","log","length","slice","fetchCollection","interval","setInterval","clearInterval","onClick","style","width","height","backgroundColor","color","textAlign","marginBottom","fontSize","map","token","marginLeft","marginRight","display","display_uri","replace","onLoad","e","element","target","currentSrc","src","title","id","FirebaseContext","React","createContext","getAllProfilesFB","Promise","resolve","isSuccessful","FirebaseProvider","children","useCallback","fetchBase","fetchRes","ok","Provider","value","App","profiles","setProfiles","useContext","getProfiles","gridTemplateColumns","gap","overflowY","profile","creators","holder","image","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","maxSnack","document","getElementById"],"mappings":"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","file":"static/js/main.c37780d6.chunk.js","sourcesContent":["// @ts-nocheck\nimport React, { useEffect, useState, useContext } from 'react';\n\n\n//var loaded = [];\nvar index = 0;\n\nexport const Tv = ({ address, thumbnail }) => {\n\n    const [play, setPlay] = useState(false);\n    const [current, setCurrent] = useState(thumbnail);\n    //const [cIndex, setCIndex] = useState(0);\n    const [tokens, setTokens] = useState([]);\n    const [loaded, setLoaded] = useState([]);\n\n    useEffect(() => {\n\n        async function fetchGraphQL(operationsDoc, operationName, variables) {\n            let result = await fetch('https://hdapi.teztools.io/v1/graphql', {\n                method: 'POST',\n                body: JSON.stringify({\n                    query: operationsDoc,\n                    variables: variables,\n                    operationName: operationName,\n                }),\n            })\n\n            var ress = await result.json();\n            return ress;\n        }\n\n        async function fetchCollection(addr) {\n\n            const { errors, data } = await fetchGraphQL(\n                query_collection,\n                'collectorGallery',\n                { address: addr }\n            )\n            if (errors) {\n                console.error(errors)\n            }\n            const result = data ? data.hic_et_nunc_token_holder : null;\n            console.log(addr)\n            console.log(result)\n            if (result && result.length != 0) {\n                //setCurrent(result[1].token.display_uri.replace('ipfs://', 'https://ipfs.io/ipfs/'))\n                if (result.length > 22)\n                    setTokens(result.slice(0, 21));\n                else {\n                    setTokens(result);\n                }\n\n            } else {\n                setPlay(false)\n            }\n        }\n\n        if (play) {\n            fetchCollection(address)\n        }\n    }, [address, play]);\n\n    function handleImageLoaded(element) {\n        console.log(\"loaded\")\n        console.log(element.target.currentSrc)\n        setLoaded([...loaded, element.target.currentSrc])\n    }\n\n    useEffect(() => {\n\n        function zap() {\n\n            console.log(\"zap \" + index)\n            if (loaded) {\n                //setCIndex(cIndex++)\n                if (index < loaded.length)\n                    index++;\n                else\n                    index = 0\n\n                setCurrent(loaded[index])\n\n            }\n            /*\n                        if (actives) {\n                            console.log(\"zap\")\n                            if (teiaTVindex + 1 < actives.length)\n                                setTeiaTVindex(teiaTVindex => teiaTVindex + 1)\n                            else\n                                setTeiaTVindex(0)\n                        } else {\n                            if (!actives) {\n                                grabActives()\n                            }\n                            setTeiaTVindex(0)\n                        }*/\n        }\n\n        if (play) {\n            const interval = setInterval(zap, 2000);\n            return () => {\n                clearInterval(interval)\n            };\n        }\n    }, [play, loaded]);\n\n    return (\n        <div onClick={() => { console.log(\"play\"); setPlay(!play) }} style={{ width: \"100%\", height: \"100%\", backgroundColor: \"black\", color: \"cyan\" }}>\n            {<div style={{ textAlign: \"center\", width: \"100%\", marginBottom: 10, fontSize: \"0.2em\" }}>\n                {address}\n            </div>}\n            {tokens && tokens.map(({ token }) => (\n                <div key={token.id} style={{ width: \"80%\", height: \"80%\", marginLeft: \"auto\", marginRight: \"auto\", display: current === token.display_uri.replace('ipfs://', 'https://ipfs.io/ipfs/') ? \"block\" : \"none\" }}>\n                    <img onLoad={e => handleImageLoaded(e)} src={token.display_uri.replace('ipfs://', 'https://ipfs.io/ipfs/')} title={\"thumbnail\"} style={{ width: \"100%\", height: \"100%\" }} />\n                </div>\n            ))\n            }\n\n            <div style={{ width: \"80%\", height: \"80%\", marginLeft: \"auto\", marginRight: \"auto\", display: thumbnail === current ? \"block\" : \"none\" }}>\n                <img src={thumbnail} title={\"thumbnail\"} style={{ width: \"100%\", height: \"100%\" }} />\n            </div>\n\n\n        </div >\n    );\n}\n\nconst query_collection = `\nquery collectorGallery($address: String!) {\n  hic_et_nunc_token_holder(where: {holder_id: {_eq: $address}, token: {creator: {address: {_neq: $address}}}, quantity: {_gt: \"0\"}}, order_by: {token_id: desc}) {\n\ttoken {\n\t  id\n\t  artifact_uri\n\t  display_uri\n\t  thumbnail_uri\n\t  timestamp\n\t  mime\n\t  title\n\t  description\n\t  supply\n\t  royalties\n\t  creator {\n\t\taddress\n\t  }\n\t}\n  }\n}\n`","// @ts-nocheck\nimport React, { useCallback } from \"react\";\n\n\nexport interface IFirebaseContext {\n  getAllProfilesFB: () => Promise<IFetchResponseBase>;\n}\n\nexport const FirebaseContext = React.createContext<IFirebaseContext>({\n  getAllProfilesFB: () => Promise.resolve({ isSuccessful: false }),\n});\n\nconst fetchBase =\n  process.env.NODE_ENV === \"development\"\n    ? \"\"\n    : \"https://twall-backend.herokuapp.com\";\n\nexport const FirebaseProvider: React.FC = ({ children }) => {\n\n  const getAllProfilesFB =\n    useCallback(async (): Promise<IFetchResponseBase> => {\n      const fetchRes = await fetch(fetchBase + `/users/allProfiles`, {\n        method: \"GET\",\n      });\n\n      if (fetchRes.ok) {\n        return await fetchRes.json();\n      }\n    }, []);\n\n  return (\n    <FirebaseContext.Provider\n      value={{\n        getAllProfilesFB,\n      }}\n    >\n      {children}\n    </FirebaseContext.Provider>\n  );\n};\n","// @ts-nocheck\nimport \"./App.css\";\nimport React, { useEffect, useState, useContext } from \"react\";\nimport { IconButton, Button, Select, MenuItem, TextField, Card } from \"@material-ui/core\";\nimport { Tv } from \"./components/Tv\";\nimport { FirebaseContext } from \"./firebaseContext\";\n\nfunction App() {\n  const [profiles, setProfiles] = useState([]);\n  const { getAllProfilesFB } = useContext(FirebaseContext);\n\n  useEffect(() => {\n    async function getProfiles() {\n      let result = await getAllProfilesFB();\n\n      setProfiles(result.profiles)\n    }\n    getProfiles();\n  }, [getAllProfilesFB, setProfiles]);\n\n  return (\n    <div style={{ width: \"100vw\", height: \"100vh\", display: \"grid\", gridTemplateColumns: \"repeat(3, 1fr)\", gap: 0, overflowY: \"auto\", backgroundColor: \"black\" }}>\n      {profiles && profiles.map((profile, index) => (\n        <div key={index} style={{ width: \"100%\", height: \"33.33vh\" }}>\n          <Tv address={profile.creators[0].holder.address} thumbnail={profile.image.replace('ipfs://', 'https://ipfs.io/ipfs/')} />\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import \"./index.css\";\n\nimport App from \"./App\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { FirebaseProvider } from \"./firebaseContext\";\nimport { SnackbarProvider } from \"notistack\";\n\nReactDOM.render(\n  <FirebaseProvider>\n    <SnackbarProvider maxSnack={3}>\n      <App />\n    </SnackbarProvider>\n  </FirebaseProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}